{"version":3,"sources":["webpack:///src/app/main/imageCarousel/imageCarousel.component.ts","webpack:///src/app/http.service.ts","webpack:///src/app/main/main.module.ts","webpack:///src/app/main/promotion/promotion.component.ts","webpack:///node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js","webpack:///src/app/main/main.component.ts","webpack:///src/app/main/main.html"],"names":["ImageCarousel","httpService","getImagesPaths","histonic","subscribe","data","paths","HttpService","http","ForHistrionic","get","moduleRoutes","path","component","MainModule","forChild","PromotionComponent","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","existing","filter","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","map","params","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","replace","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","ɵfac","HttpClient_Factory","t","ɵprov","token","factory","ctorParameters","ngDevMode","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","cancelled","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","ɵmod","ɵinj","HttpClientXsrfModule_Factory","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","ngJitMode","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","MainViewComponent"],"mappings":"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","file":"main-main-module-es5.js","sourcesContent":["import { Component, OnInit,Input } from '@angular/core';\nimport { HttpService } from '../../http.service';\n\n\n@Component({\n\tselector: 'div.carousel-inner',\n\ttemplate: `<div *ngFor=\"let path of paths; let i = index\" data-interval=\"5000\" style=\"height:inherit\" class=\"carousel-item\" [class.active]=\"i==0\">\n\t\t\t\t\t<div [style.background-image]=\"'url('+path+')'\" style=\"height:inherit;\n\t\t\t\t\t\t\t\t\t\tbackground-repeat:no-repeat; background-size:cover;background-position: center;\">\n\t\t\t\t\t</div>\t\t\t\t\t\t\n\t\t\t   </div>` ,\n\tproviders: [HttpService]\n})\n\nexport class ImageCarousel implements OnInit {\n\tpaths: string[];\n\n\t@Input() histonic: string;\n\n\tconstructor(private httpService: HttpService) { }\n\n\tngOnInit() {\n\t\tthis.httpService.getImagesPaths(this.histonic).subscribe(data => this.paths = data)\r\n\t}\n\n}","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class HttpService {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getImagesPaths(ForHistrionic: string): Observable<string[]> {\r\n        return this.http.get<string[]>('/api/Image/ImagePathList?ForHistrionic=' + ForHistrionic);\r\n    }\r\n\r\n}","import { NgModule } from '@angular/core';\nimport { ImageCarousel } from './imageCarousel/imageCarousel.component'\nimport { PromotionComponent } from './promotion/promotion.component';\nimport { MainViewComponent } from './main.component';\r\nimport { HttpClientModule } from '@angular/common/http';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nconst moduleRoutes: Routes = [\r\n    { path: '', component: MainViewComponent }\r\n];\n\n@NgModule({\n    declarations: [MainViewComponent, ImageCarousel, PromotionComponent],\n    imports: [HttpClientModule, CommonModule, RouterModule.forChild(moduleRoutes)],\n    exports: [MainViewComponent, PromotionComponent],\n})\nexport class MainModule { }\n\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpService } from '../../http.service';\r\n\r\n@Component({\r\n    selector: 'div.promotion',\r\n    styles: [`.promotion-item{\r\n                background-repeat:no-repeat;\r\n                background-size:cover;\r\n                background-position:center;\r\n                \r\n            }`],\r\n    template: `\r\n        <div *ngFor=\"let path of paths;\" [style.background-image]=\"'url('+path+')'\" class=\"promotion-item w-100\">\r\n        </div>\r\n    <`,\r\n    providers: [HttpService]\r\n})\r\nexport class PromotionComponent implements OnInit\r\n{\r\n    paths: string[];\r\n\r\n    constructor(private httpService: HttpService) { }\r\n\r\n    ngOnInit()\r\n    {\r\n        this.httpService.getImagesPaths(\"Promotion\").subscribe(data => this.paths = data)\r\n    }\r\n}","/**\n * @license Angular v11.2.0\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        const params = rawParams.split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('load', onLoad);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'main',\r\n    templateUrl: `./main.html`,\r\n    styles: [`\r\n        div.carousel{\r\n            width:95%;  \r\n        }\r\n        span.user-carousel-caption {\r\n            z-index: 2;\r\n            margin:auto;\r\n            font-family: 'Yeseva One', cursive;\r\n            font-size:2.2vmax;\r\n            left: 0;\r\n            top:10vmax;\r\n            right: 0;\r\n            text-shadow: 4px 4px 2px rgba(0, 0, 0, 0.5);\r\n            width:40vmax;\r\n        }\r\n    `]\r\n})\r\n\r\nexport class MainViewComponent\r\n{\r\n}","\r\n<div class=\"carousel slide d-flex m-auto \" data-ride=\"carousel\">\r\n    <span class=\"user-carousel-caption position-absolute text-white text-center\">\r\n        Харківський академічний український драматичний театр ім. Тараса Шевченка\r\n    </span>\r\n    <div histonic=\"Main\" class=\"carousel-inner\" style=\"height:35vmax;filter: brightness(0.6) contrast(120%);\"></div>\r\n</div>\r\n"]}